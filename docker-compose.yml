version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: tutoring_platform
      POSTGRES_USER: tutoring_user
      POSTGRES_PASSWORD: tutoring_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tutoring_user -d tutoring_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Django Web Service
  django:
    build: 
      context: .
      dockerfile: Dockerfile.django
    command: gunicorn tutoring_platform.wsgi:application --bind 0.0.0.0:8000 --workers 3
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://tutoring_user:tutoring_pass@db:5432/tutoring_platform
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=False
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI AI Service
  fastapi:
    build:
      context: ./fastapi_service
      dockerfile: Dockerfile
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --workers 2
    volumes:
      - ./fastapi_service:/app
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql+asyncpg://tutoring_user:tutoring_pass@db:5432/tutoring_platform
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SERVICE_URL=http://django:8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  celery_worker:
    build: 
      context: .
      dockerfile: Dockerfile.django
    command: celery -A celery_tasks.celery_app worker --loglevel=info --concurrency=2
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DATABASE_URL=postgresql://tutoring_user:tutoring_pass@db:5432/tutoring_platform
      - REDIS_URL=redis://redis:6379/0
      - FASTAPI_SERVICE_URL=http://fastapi:8001
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A celery_tasks.celery_app inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat for periodic tasks
  celery_beat:
    build: 
      context: .
      dockerfile: Dockerfile.django
    command: celery -A celery_tasks.celery_app beat --loglevel=info
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://tutoring_user:tutoring_pass@db:5432/tutoring_platform
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_DJANGO_API_URL=http://localhost:8000/api/v1
      - REACT_APP_FASTAPI_API_URL=http://localhost:8001
      - REACT_APP_WS_URL=ws://localhost:8001/ws
    depends_on:
      - django
      - fastapi

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./ssl:/etc/nginx/ssl  # For SSL certificates
    depends_on:
      - django
      - fastapi
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  default:
    driver: bridge